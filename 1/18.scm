(define (new-fast-* a b)
  (define (double a)
    (* a 2))
  (define (halve a)
    (if (even? a)
      (/ a 2)
      "cannot halve"))
  (define(new-fast-*-iter a b n)
    (cond ((= b 0) n)
          ((= b 1) (+ a n))
          ((even? b) (new-fast-*-iter (double a) (halve b) n))
          (else (new-fast-*-iter a (- b 1) (+ n a)))))
  (new-fast-*-iter a b 0))

(print (new-fast-* 2 1))
(print (new-fast-* 2 2))
(print (new-fast-* 2 3))
(print (new-fast-* 2 4))
(print (new-fast-* 2 5))
(print (new-fast-* 2 6))
